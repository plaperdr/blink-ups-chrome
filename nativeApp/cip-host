#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
import threading
import Queue
import pickle
from os.path import expanduser,exists

#################################  CONFIG  #################################
def relativeToAbsoluteHomePath(path):
    """ Tranforms a relative home path into an absolute one
    Argument:
    path -- the path that may need transformation"""
    if "~" in path:
        return path.replace("~",expanduser("~"))
    else:
        return path

profileFolder = relativeToAbsoluteHomePath("~/.config/google-chrome/Default/")

#################################  MESSAGES  #################################
# Helper function that sends a message to the webapp.
def send_message(message):
   # Write message size.
  sys.stdout.write(struct.pack('I', len(message)))
  # Write the message itself.
  sys.stdout.write(message)
  sys.stdout.flush()

# Thread that reads messages from the webapp.
def read_thread_func(queue):
  message_number = 0
  while 1:
    # Read the message length (first 4 bytes).
    text_length_bytes = sys.stdin.read(4)

    if len(text_length_bytes) == 0:
      if queue:
        queue.put(None)
      sys.exit(0)

    # Unpack message length as 4 byte integer.
    text_length = struct.unpack('i', text_length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = sys.stdin.read(text_length).decode('utf-8')

    if queue:
      queue.put(text)
    else:
      # In headless mode just send an echo message back.
      send_message('{"echo": %s}' % text)


#################################  CPI ACCESSOR  #################################
class CPIAccessor():
  def __init__(self, queue):
    self.queue = queue

  def processMessages(self):
    message = self.queue.get()
    if message == None:
      sys.exit(0)
                
    with open(profileFolder+"shared.pkl",'w') as sharedFile:
      pickle.dump(message.encode('utf-8'),sharedFile)


#################################  MAIN  #################################
def Main():
  queue = Queue.Queue()
  accessor = CPIAccessor(queue)

  thread = threading.Thread(target=read_thread_func, args=(queue,))
  thread.daemon = True
  thread.start()

  #SEND OPEN TABS
  if exists(profileFolder+"shared.pkl"):
    with open(profileFolder+"shared.pkl",'r') as sharedFile:
      message = pickle.load(sharedFile)
      send_message(message)
  
  #LAUNCH WORKER
  while True:
    accessor.processMessages()

  sys.exit(0)


if __name__ == '__main__':
  Main()
